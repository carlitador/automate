
import pandas as pd
import os
import argparse
import automate.json as json 


		
class Parser:
	def __init__(self, input_file: str = None, template: dict = None, splitter: str = "@", name_col: str = "name") -> None:
		self.input_file = input_file
		self.template = template  # Input json
		self.splitter = splitter
		self.name_col = name_col
		self.df = pd.read_csv(self.input_file)
		self.cases = [] # Will contains the infos about the cases that were generated by the parser

	def populate(self):
		for _, g in self.df.groupby(self.name_col): # Iterate on each of the case, groupped by case name
			d = json.load(self.template,to_parse=g.to_dict(orient="list"))
			
	def cli(self):
		pass


def cli_func():
	parser = argparse.ArgumentParser(
		description="This script reads a .csv matrix file that can contains DoF, geometry files link and case description"
	)

	parser.add_argument("input", nargs="?", help="Matrix .csv path to be used", default="matrix.csv")
	parser.add_argument("-j", "--json", nargs="?", help="json file path to be used", default="parameters.json")
	parser.add_argument("-p", "--parse", nargs="?", help="Symbol to be used as a splitter in the .json", default="@")

	return parser


if __name__ == "__main__":

	args = cli_func().parse_args()

	parser = Parser(
		input_file=args.input,
		template=args.json,
		splitter=args.splitter
	)
